#!/usr/bin/env node

const https = require("https");
const http = require("http");
const fs = require("fs");

const rtcServer = require("../rtc");

let app = require("../app");

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render("not-found");
});

app.use((err, req, res, next) => {
  // always log the error
  console.error("ERROR", req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render("error");
  }
});

let server;
if (process.env.NODE_ENV == "production") {
  server = http.createServer(app);
  console.log("HTTP Production Server");
} else {
  console.log("HTTPS DEBUG SERVER");
  server = https.createServer(
    {
      key: fs.readFileSync("./server/certs/localhost.key"),
      cert: fs.readFileSync("./server/certs/localhost.cert")
    },
    app
  );
}

server.listen(process.env.PORT);

// Start web RTC server with socketio
rtcServer(server);

server.on("error", error => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});
